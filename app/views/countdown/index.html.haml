#timekeeper.white
  =render "layouts/timekeeper", tk:@heist
  =render "layouts/timekeeper", tk:@wizard
  =render "layouts/timekeeper", tk:@nuclear

:javascript
  window.onload = function() {

    //check if game is running
    function check_if_running(){
      var feedback = $.ajax({
        type: "POST",
        url: "countdown/checkrunning",
        async: false
      }).complete(function(){
        setTimeout(function(){check_if_running();}, 5000);
      }).responseText;
    }

    $(function(){
      check_if_running();
    });

    //timercountdown
  function CountDownTimer(duration, granularity) {
    this.duration = duration;
    this.granularity = granularity || 1000;
    this.tickFtns = [];
    this.running = false;
  }

  CountDownTimer.prototype.start = function() {
    if (this.running) {
      return;
    }
    this.running = true;
    var start = Date.now(),
      that = this,
      diff, obj;

    (function timer() {
      diff = that.duration - (((Date.now() - start) / 1000) | 0);

      if (diff > 0) {
        setTimeout(timer, that.granularity);
      } else {
        diff = 0;
        that.running = false;
      }

      obj = CountDownTimer.parse(diff);
      that.tickFtns.forEach(function(ftn) {
        ftn.call(this, obj.minutes, obj.seconds);
      }, that);
    }());
  };

  CountDownTimer.prototype.onTick = function(ftn) {
    if (typeof ftn === 'function') {
      this.tickFtns.push(ftn);
    }
    return this;
  };

  CountDownTimer.prototype.expired = function() {
    return !this.running;
  };

  CountDownTimer.parse = function(seconds) {
    return {
      'minutes': (seconds / 60) | 0,
      'seconds': (seconds % 60) | 0
    };
  };

    //timer code
    var display1 = document.querySelector('#ctime1'),
        display2 = document.querySelector('#ctime2'),
        timer = new CountDownTimer(#{@heist.end - Time.now}),
        timer2 = new CountDownTimer(#{@wizard.end - Time.now});

    timer.onTick(format1).start();
    timer2.onTick(format2).start();



    function format1(minutes, seconds) {
      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;
      display1.textContent = minutes + ':' + seconds;
    }

    function format2(minutes, seconds) {
      minutes = minutes < 10 ? "0" + minutes : minutes;
      seconds = seconds < 10 ? "0" + seconds : seconds;
      display2.textContent = minutes + ':' + seconds;
    }
  };